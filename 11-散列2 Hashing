#include<stdio.h>
#include<stdlib.h>
#include<math.h>
#include<string.h>
#define MAX_Size 10000
int Position[MAX_Size] = { 0 };/*保存已插入整数在哈希表中下标，其值为-1时说明插入失败*/

int NextPrime(int a) {/*如果当前TableSize为素数则返还TableSize的值，否则返回大于TableSize的最小素数*/
	int i, j;
	if (a % 2 != 0) {
		for (i = 3; i*i < a && a%i != 0; i++);
		if (i*i > a) return a;
	}
	a = a % 2 ? a + 2 : a + 1;
	for (i = a; ; i += 2) {
		for (j = 3; j*j < a&& i%j != 0; j++);
		if (j*j > i) return i;
	}
}

typedef struct HashNode {
	int Tag;
}Table[MAX_Size];

typedef struct HashTable {
	Table Data;
	int TableSize;
}*HashTable;

int Hash(int key,int TableSize) {
	return key % TableSize;
}

void Insert(HashTable H,int key,int pos){/*在哈希表插入当前元素并更新该元素在哈希表中下标到Position数组*/
	int index = Hash(key,H->TableSize);
	int i = 0,real_pos;
	for (; i < H->TableSize; i++) {
		real_pos = (index + i * i) % H->TableSize;
		if (H->Data[real_pos].Tag == 0) {/*成功找到空位则插入*/
			Position[pos] = real_pos;/*将当前元素在哈希表中下标保存到Position数组*/
			H->Data[real_pos].Tag = 1;
			return;
		}
	}
	/*若插入失败则在Position数组中pos位置标记-1*/
	Position[pos] = -1;
}

int main() {
	int MSize, N, temp;
	scanf("%d %d\n", &MSize, &N);
	HashTable H = (HashTable)malloc(sizeof(struct HashTable));
	H->TableSize = NextPrime(MSize);
	for (int i = 0; i < H->TableSize; i++) {/*初始化哈希表*/
		H->Data[i].Tag = 0;
	}
	for (int i = 0; i < N; i++) {/*接收Input数据并插入哈希表*/
		scanf("%d", &temp);
		Insert(H, temp, i);
	}
	for (int i = 0; i < N-1; i++) {/*历遍Position数组输出每个元素位置，如果插入失败输出'-'*/
		Position[i] == -1 ? printf("- ") : printf("%d ", Position[i]);
	}
	Position[N - 1] == -1 ? printf("-") : printf("%d", Position[N - 1]);
	free(H);
	return 0;
}

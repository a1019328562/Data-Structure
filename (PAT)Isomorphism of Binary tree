题目：
给定两棵树T1和T2。如果T1可以通过若干次左右孩子互换就变成T2，则我们称两棵树是“同构”的。
例如图1给出的两棵树就是同构的，因为我们把其中一棵树的结点A、B、G的左右孩子互换后，就得到另外一棵树。而图2就不是同构的。
现给定两棵树，请你判断它们是否是同构的。
输入格式:
输入给出2棵二叉树树的信息。对于每棵树，首先在一行中给出一个非负整数N (≤10)，即该树的结点数（此时假设结点从0到N−1编号）；
随后N行，第i行对应编号第i个结点，给出该结点中存储的1个英文大写字母、其左孩子结点的编号、右孩子结点的编号。
如果孩子结点为空，则在相应位置上给出“-”。给出的数据间用一个空格分隔。注意：题目保证每个结点中存储的字母是不同的。

输出格式:
如果两棵树是同构的，输出“Yes”，否则输出“No”。
输入样例1（对应图1）：
8
A 1 2
B 3 4
C 5 -
D - -
E 6 -
G 7 -
F - -
H - -
8
G - 4
B 7 6
F - -
A 5 1
H - -
C 0 -
D - -
E 2 -
输出样例1:
Yes

输入样例2（对应图2）：
8
B 5 7
F - -
A 0 3
C 6 -
H - -
D - -
G 4 -
E 1 -
8
D 6 -
B 5 -
E - -
H - -
C 0 2
G - 3
F - -
A 1 4
输出样例2:
No

代码实现：
/*存在两个问题，首先因为是首次做二叉树练习题，所以刻意用了二叉链表储存方式，事实上此题用顺序储存结构更为高效简洁；
其次main函数过于臃肿，应当编写一个函数来完成接收储存Input数据的操作。
*/
#include<stdio.h>
#include<stdlib.h>
#include<malloc.h>
typedef struct BiT {
	int Data;
	struct BiT *Lchild;
	struct BiT *Rchild;
}BiNod, *BiTree;

typedef struct B {
	int Data;
	int lchild;
	int rchild;
}Input;

int headsearch(int *a, int num) {
	int j = 0;
	while (j < num && a[j] != -1) {
		j++;
	}
	return j;
}

void creBiTree(Input *a, int pos, BiTree T) {
	int L, R;
	L = a[pos].lchild;
	R = a[pos].rchild;
	T->Data = a[pos].Data;
	if (L != '-') {
		T->Lchild = (BiTree)malloc(sizeof(BiNod));
		creBiTree(a, L, T->Lchild);
	}
	else T->Lchild = NULL;
	if (R != '-') {
		T->Rchild = (BiTree)malloc(sizeof(BiNod));
		creBiTree(a, R, T->Rchild);
	}
	else T->Rchild = NULL;
}

int matchBiTree(BiTree a, BiTree b) {
	int r1, r2;
	if (!a && !b) return 1;
	if ((a&&b)&&(a->Data==b->Data)) {
		r1=matchBiTree(a->Lchild, b->Lchild)&& matchBiTree(a->Rchild, b->Rchild);
		r2= matchBiTree(a->Lchild, b->Rchild)&&matchBiTree(a->Rchild, b->Lchild);
		return r1 || r2;
	}
	else return 0;
}

int main() {
	int num1, num2, HeadA, HeadB;
	char ch, left, right;
	int headfindA[10] = { -1,-1, -1, -1, -1, -1, -1, -1, -1, -1 };
	int headfindB[10] = { -1,-1, -1, -1, -1, -1, -1, -1, -1, -1 };
	BiTree TA = (BiTree)malloc(sizeof(BiNod));
	BiTree TB = (BiTree)malloc(sizeof(BiNod));
	Input a[10];
	Input b[10];
	scanf("%d", &num1);
	scanf("%*[^\n]"); scanf("%*c");
	for (int i = 0; i < num1; i++) {
		scanf("%c %c %c", &ch, &left, &right);
		scanf("%*[^\n]"); scanf("%*c");
		a[i].Data = ch;
		if (left<= '9' && left >= '0') {
			left = left - '0';
			a[i].lchild = left;
			headfindA[left] = left;
		}
		else a[i].lchild = left;
		if (right<= '9' && right >= '0') {
			right = right - '0';
			a[i].rchild = right;
			headfindA[right] = right;
		}
		else a[i].rchild = right;
	}
	scanf("%d", &num2);
	scanf("%*[^\n]"); scanf("%*c");
	for (int i = 0; i < num2; i++) {
		scanf("%c %c %c", &ch, &left, &right);
		scanf("%*[^\n]"); scanf("%*c");
		b[i].Data = ch;
		if (left<='9' && left >='0') {
			left = left - '0';
			b[i].lchild = left;
			headfindB[left] = left;
		}
		else b[i].lchild = left;
		if (right < 58 && right >= 48) {
			right = right - 48;
			b[i].rchild = right;
			headfindB[right] = right;
		}
		else b[i].rchild = right;
	}
	HeadA = headsearch(headfindA, num1);
	HeadB = headsearch(headfindB, num2);
	creBiTree(a, HeadA, TA);
	creBiTree(b, HeadB, TB);
	if (matchBiTree(TA, TB)) {
		printf("Yes\n");
	}
	else printf("No\n");
	system("pause");
	return 0;
}
